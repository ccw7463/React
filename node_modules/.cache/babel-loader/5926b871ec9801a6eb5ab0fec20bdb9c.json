{"ast":null,"code":"var _jsxFileName = \"/workspace/changwoo/React/src/components/ChatWindow.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport Message from './Message';\nimport InputBox from './InputBox';\nconst ChatWindow = ({\n  initialMessages = [],\n  onSend,\n  showInitialMessage\n}) => {\n  const [messages, setMessages] = useState(initialMessages);\n  const [isInitialMessageVisible, setIsInitialMessageVisible] = useState(showInitialMessage); // 초기 메시지 상태 관리\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  };\n  useEffect(() => {\n    scrollToBottom(); // 새로운 메시지가 추가될 때 스크롤을 아래로 이동\n  }, [messages]);\n  useEffect(() => {\n    setMessages(initialMessages);\n    if (initialMessages.length > 0) {\n      setIsInitialMessageVisible(false); // 대화 내역이 있으면 초기 메시지 숨김\n    }\n  }, [initialMessages]);\n  useEffect(() => {\n    setIsInitialMessageVisible(showInitialMessage); // 새로운 대화를 시작할 때 초기 메시지 상태를 업데이트\n  }, [showInitialMessage]);\n  const handleSend = async message => {\n    if (isInitialMessageVisible) {\n      setIsInitialMessageVisible(false); // 첫 메시지를 보낼 때 초기 메시지를 숨김\n    }\n    const userMessage = {\n      sender: 'user',\n      text: message\n    };\n    setMessages(prevMessages => [...prevMessages, userMessage]);\n    try {\n      const response = await fetch('http://localhost:7860/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message\n        })\n      });\n      const data = await response.json();\n      const botMessage = {\n        sender: 'bot',\n        text: data.reply\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chat-window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, isInitialMessageVisible && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"initial-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"greeting\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"\\uC548\\uB155\\uD558\\uC138\\uC694,\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"subtext\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }, \"\\uBB34\\uC5C7\\uC744 \\uB3C4\\uC640\\uB4DC\\uB9B4\\uAE4C\\uC694?\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messages-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(Message, {\n    key: index,\n    sender: msg.sender,\n    text: msg.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    ref: messagesEndRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(InputBox, {\n    onSend: handleSend,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }));\n};\nexport default ChatWindow;","map":{"version":3,"names":["React","useState","useEffect","useRef","Message","InputBox","ChatWindow","initialMessages","onSend","showInitialMessage","messages","setMessages","isInitialMessageVisible","setIsInitialMessageVisible","messagesEndRef","scrollToBottom","current","scrollIntoView","behavior","length","handleSend","message","userMessage","sender","text","prevMessages","response","fetch","method","headers","body","JSON","stringify","data","json","botMessage","reply","error","console","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","key","ref"],"sources":["/workspace/changwoo/React/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport Message from './Message';\nimport InputBox from './InputBox';\n\nconst ChatWindow = ({ initialMessages = [], onSend, showInitialMessage }) => {\n  const [messages, setMessages] = useState(initialMessages);\n  const [isInitialMessageVisible, setIsInitialMessageVisible] = useState(showInitialMessage); // 초기 메시지 상태 관리\n  const messagesEndRef = useRef(null);\n\n  const scrollToBottom = () => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  };\n\n  useEffect(() => {\n    scrollToBottom(); // 새로운 메시지가 추가될 때 스크롤을 아래로 이동\n  }, [messages]);\n\n  useEffect(() => {\n    setMessages(initialMessages);\n    if (initialMessages.length > 0) {\n      setIsInitialMessageVisible(false); // 대화 내역이 있으면 초기 메시지 숨김\n    }\n  }, [initialMessages]);\n\n  useEffect(() => {\n    setIsInitialMessageVisible(showInitialMessage); // 새로운 대화를 시작할 때 초기 메시지 상태를 업데이트\n  }, [showInitialMessage]);\n\n  const handleSend = async (message) => {\n    if (isInitialMessageVisible) {\n      setIsInitialMessageVisible(false); // 첫 메시지를 보낼 때 초기 메시지를 숨김\n    }\n\n    const userMessage = { sender: 'user', text: message };\n    setMessages((prevMessages) => [...prevMessages, userMessage]);\n\n    try {\n      const response = await fetch('http://localhost:7860/api/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message }),\n      });\n\n      const data = await response.json();\n      const botMessage = { sender: 'bot', text: data.reply };\n      setMessages((prevMessages) => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n\n  return (\n    <div className=\"chat-window\">\n      {isInitialMessageVisible && (\n        <div className=\"initial-message\">\n          <span className=\"greeting\">안녕하세요,</span>\n          <span className=\"subtext\">무엇을 도와드릴까요?</span>\n        </div>\n      )}\n      <div className=\"messages-container\">\n        {messages.map((msg, index) => (\n          <Message key={index} sender={msg.sender} text={msg.text} />\n        ))}\n        <div ref={messagesEndRef} />\n      </div>\n      <InputBox onSend={handleSend} />\n    </div>\n  );\n};\n\nexport default ChatWindow;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}