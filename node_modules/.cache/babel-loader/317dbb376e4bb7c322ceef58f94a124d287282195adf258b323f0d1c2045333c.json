{"ast":null,"code":"var _jsxFileName = \"/workspace/changwoo/React/src/App.js\",\n  _s = $RefreshSig$();\n// // 어플리케이션의 진입점\n// // 역할\n// // 1. 전체 레이아웃을 관리하는 컴포넌트임 \n// //    1.1 components에 있는 주요 컴포넌트를 관리함\n\n// import React, { useState } from 'react'; // React 라이브러리와 그안에 useState 훅을 불러옴. useState는 컴포넌트 내부에서 상태를 관리하는데 사용\n// import ChatWindow from './components/ChatWindow';\n// import Sidebar from './components/Sidebar';\n// import Header from './components/Header';\n// import './styles.css';\n\n// function App() { // app 컴포넌트 정의 (다른 모든 UI 요소를 포함)\n//   const [isSidebarOpen, setSidebarOpen] = useState(true);\n\n//   const toggleSidebar = () => {\n//     setSidebarOpen(!isSidebarOpen);\n//   };\n\n//   return (\n//     <div className={`App ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\n//       <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />\n//       <div className=\"main-content\">\n//         <Header />\n//         <ChatWindow />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState } from 'react';\nimport ChatWindow from './components/ChatWindow';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chatHistories = {\n  1: [{\n    sender: 'bot',\n    text: '안녕하세요, 무엇을 도와드릴까요?'\n  }, {\n    sender: 'user',\n    text: '이전 대화 내용이 궁금해요.'\n  }],\n  2: [{\n    sender: 'bot',\n    text: '두 번째 대화입니다. 무엇을 도와드릴까요?'\n  }, {\n    sender: 'user',\n    text: '두 번째 대화에요.'\n  }]\n};\nfunction App() {\n  _s();\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\n  const [currentChatId, setCurrentChatId] = useState(null); // 현재 선택된 채팅 ID\n  const [messages, setMessages] = useState([]); // 현재 채팅 메시지들\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!isSidebarOpen);\n  };\n  const handleChatHistoryClick = chatId => {\n    setCurrentChatId(chatId);\n    setMessages(chatHistories[chatId] || []); // 선택된 채팅 내역 불러오기\n  };\n  const handleSend = message => {\n    const userMessage = {\n      sender: 'user',\n      text: message\n    };\n    const updatedMessages = [...messages, userMessage];\n\n    // 여기서는 단순히 메시지를 추가하는 동작만 구현\n    setMessages(updatedMessages);\n\n    // 실질적인 백엔드 통신이나 메시지 저장 기능을 구현하려면 추가적인 로직이 필요\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `App ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      isOpen: isSidebarOpen,\n      toggleSidebar: toggleSidebar,\n      onChatHistoryClick: handleChatHistoryClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatWindow, {\n        messages: messages,\n        onSend: handleSend\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"SuLpfCFkWzfxAkXKZXH93LYumL4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ChatWindow","Sidebar","Header","jsxDEV","_jsxDEV","chatHistories","sender","text","App","_s","isSidebarOpen","setSidebarOpen","currentChatId","setCurrentChatId","messages","setMessages","toggleSidebar","handleChatHistoryClick","chatId","handleSend","message","userMessage","updatedMessages","className","children","isOpen","onChatHistoryClick","fileName","_jsxFileName","lineNumber","columnNumber","onSend","_c","$RefreshReg$"],"sources":["/workspace/changwoo/React/src/App.js"],"sourcesContent":["// // 어플리케이션의 진입점\n// // 역할\n// // 1. 전체 레이아웃을 관리하는 컴포넌트임 \n// //    1.1 components에 있는 주요 컴포넌트를 관리함\n\n\n// import React, { useState } from 'react'; // React 라이브러리와 그안에 useState 훅을 불러옴. useState는 컴포넌트 내부에서 상태를 관리하는데 사용\n// import ChatWindow from './components/ChatWindow';\n// import Sidebar from './components/Sidebar';\n// import Header from './components/Header';\n// import './styles.css';\n\n// function App() { // app 컴포넌트 정의 (다른 모든 UI 요소를 포함)\n//   const [isSidebarOpen, setSidebarOpen] = useState(true);\n\n//   const toggleSidebar = () => {\n//     setSidebarOpen(!isSidebarOpen);\n//   };\n\n//   return (\n//     <div className={`App ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\n//       <Sidebar isOpen={isSidebarOpen} toggleSidebar={toggleSidebar} />\n//       <div className=\"main-content\">\n//         <Header />\n//         <ChatWindow />\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React, { useState } from 'react';\nimport ChatWindow from './components/ChatWindow';\nimport Sidebar from './components/Sidebar';\nimport Header from './components/Header';\nimport './styles.css';\n\nconst chatHistories = {\n  1: [\n    { sender: 'bot', text: '안녕하세요, 무엇을 도와드릴까요?' },\n    { sender: 'user', text: '이전 대화 내용이 궁금해요.' }\n  ],\n  2: [\n    { sender: 'bot', text: '두 번째 대화입니다. 무엇을 도와드릴까요?' },\n    { sender: 'user', text: '두 번째 대화에요.' }\n  ]\n};\n\nfunction App() {\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\n  const [currentChatId, setCurrentChatId] = useState(null); // 현재 선택된 채팅 ID\n  const [messages, setMessages] = useState([]); // 현재 채팅 메시지들\n\n  const toggleSidebar = () => {\n    setSidebarOpen(!isSidebarOpen);\n  };\n\n  const handleChatHistoryClick = (chatId) => {\n    setCurrentChatId(chatId);\n    setMessages(chatHistories[chatId] || []); // 선택된 채팅 내역 불러오기\n  };\n\n  const handleSend = (message) => {\n    const userMessage = { sender: 'user', text: message };\n    const updatedMessages = [...messages, userMessage];\n\n    // 여기서는 단순히 메시지를 추가하는 동작만 구현\n    setMessages(updatedMessages);\n\n    // 실질적인 백엔드 통신이나 메시지 저장 기능을 구현하려면 추가적인 로직이 필요\n  };\n\n  return (\n    <div className={`App ${isSidebarOpen ? 'sidebar-open' : 'sidebar-closed'}`}>\n      <Sidebar\n        isOpen={isSidebarOpen}\n        toggleSidebar={toggleSidebar}\n        onChatHistoryClick={handleChatHistoryClick}\n      />\n      <div className=\"main-content\">\n        <Header />\n        <ChatWindow messages={messages} onSend={handleSend} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,aAAa,GAAG;EACpB,CAAC,EAAE,CACD;IAAEC,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAqB,CAAC,EAC7C;IAAED,MAAM,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAkB,CAAC,CAC5C;EACD,CAAC,EAAE,CACD;IAAED,MAAM,EAAE,KAAK;IAAEC,IAAI,EAAE;EAA0B,CAAC,EAClD;IAAED,MAAM,EAAE,MAAM;IAAEC,IAAI,EAAE;EAAa,CAAC;AAE1C,CAAC;AAED,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,aAAa,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE9C,MAAMiB,aAAa,GAAGA,CAAA,KAAM;IAC1BL,cAAc,CAAC,CAACD,aAAa,CAAC;EAChC,CAAC;EAED,MAAMO,sBAAsB,GAAIC,MAAM,IAAK;IACzCL,gBAAgB,CAACK,MAAM,CAAC;IACxBH,WAAW,CAACV,aAAa,CAACa,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;EAC5C,CAAC;EAED,MAAMC,UAAU,GAAIC,OAAO,IAAK;IAC9B,MAAMC,WAAW,GAAG;MAAEf,MAAM,EAAE,MAAM;MAAEC,IAAI,EAAEa;IAAQ,CAAC;IACrD,MAAME,eAAe,GAAG,CAAC,GAAGR,QAAQ,EAAEO,WAAW,CAAC;;IAElD;IACAN,WAAW,CAACO,eAAe,CAAC;;IAE5B;EACF,CAAC;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAE,OAAOb,aAAa,GAAG,cAAc,GAAG,gBAAgB,EAAG;IAAAc,QAAA,gBACzEpB,OAAA,CAACH,OAAO;MACNwB,MAAM,EAAEf,aAAc;MACtBM,aAAa,EAAEA,aAAc;MAC7BU,kBAAkB,EAAET;IAAuB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACF1B,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BpB,OAAA,CAACF,MAAM;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACV1B,OAAA,CAACJ,UAAU;QAACc,QAAQ,EAAEA,QAAS;QAACiB,MAAM,EAAEZ;MAAW;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACrB,EAAA,CArCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}